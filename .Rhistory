arrows(x[1]+xd, y[3] + yd, x[2] - xd, y[2] + yd, lwd=arrowlwd,
col=arrowcol, len=arrowlen)
arrows(x[1]+xd, y[3] - yd, x[2] - xd, y[4] - yd, lwd=arrowlwd,
col=arrowcol, len=arrowlen)
plot(0,0, xaxt="n", yaxt="n", xlab="", ylab="", type="n",
xlim=c(-16-2/3, 150), ylim=c(0, 100), xaxs="i", yaxs="i")
x <- c(25, 75)
xmid <- 50
y <- seq(10, 90, len=5)
text(x[1], y[3], expression(Q))
text(x[2], y[2], expression(Y[2]))
#text(x[2], y[3], expression(Y[2]))
text(x[2], y[4], expression(Y[1]))
arrowcol <- brocolors("crayons")["Cerulean"]
xd <- 8
yd <- 3.5
arrowlwd <- 5
arrowlen <- 0.3
arrows(x[1]+xd, y[3] - yd, x[2] - xd, y[2] + yd, lwd=arrowlwd,
col=arrowcol, len=arrowlen)
arrows(x[1]+xd, y[3] + yd, x[2] - xd, y[4] - yd, lwd=arrowlwd,
col=arrowcol, len=arrowlen)
library(dagitty)
g2 <- dagitty( "dag {
Y <- X <- Z1 <- V -> Z2 -> Y
Z1 <- W1 <-> W2 -> Z2
X <- W1 -> Y
X <- W2 -> Y
}")
plot(graphLayout(g2))
gg <- dagitty("dag {
Q -> M -> Y
C1 -> Q
C1 -> Y
Q -> Y")
plot(graphLayout(gg))
gg <- dagitty("dag {
Q -> M -> Y
C1 -> Q
C1 -> Y
Q -> Y}")
plot(graphLayout(gg))
gg <- dagitty('dag {
QTL [pos = "0,0"]
Mediator [pos = "1,0"]
Y [pos = "2,0"]
QTL -> Mediator -> Y
C1 -> QTL
C1 -> Y
QTL -> Y}')
plot(graphLayout(gg))
#####
g <- dagitty('dag {
DNA [pos="0,0"]
RNA [pos="1,0"]
Protein [pos="2,0"]
DNA -> RNA -> Protein
}')
plot(g)
plot(gg)
plot(graphLayout(gg))
gg <- dagitty('dag {
QTL [pos="0,0"]
Mediator [pos="1,0"]
Y [pos="2,0"]
QTL -> Mediator -> Y
C1 -> QTL
C1 -> Y
QTL -> Y}')
plot(graphLayout(gg))
#####
# ggdag, dagitty & ggraph
# tips for labeling edges: https://www.data-imaginist.com/2017/ggraph-introduction-edges/
library(ggdag)
library(ggraph)
library(igraph)
simple <- make_graph('bull')
# Random names - I swear
V(simple)$name <- c('Thomas', 'Bob', 'Hadley', 'Winston', 'Baptiste')
E(simple)$type <- sample(c('friend', 'foe'), 5, TRUE)
ggraph(simple, layout = 'graphopt') +
geom_edge_link(arrow = arrow(length = unit(4, 'mm'))) +
geom_node_point(size = 5)
ggraph(simple, layout = 'graphopt') +
geom_edge_link(arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 5)
ggraph(simple, layout = 'graphopt') +
geom_edge_link(aes(start_cap = label_rect(node1.name),
end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(4, 'mm'))) +
geom_node_text(aes(label = name))
ggraph(simple, layout = 'graphopt') +
geom_edge_link(aes(label = type),
arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 5)
ggraph(simple, layout = 'graphopt') +
geom_edge_link(aes(label = type),
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 5)
g3 <- graph_from_literal(DNA --+ RNA --+ Protein)
ggraph(g3, layout = 'graphopt') +
geom_edge_link(aes(label = type),
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 5)
####
ll <- create_layout(g3, "igraph", algorithm = "nicely")
ggraph(ll) +
geom_edge_link(#aes(label = type),
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 5)
node_positions <- tibble::tibble(x = c(0, 1, 2), y = 0)
g3 %>%
layout_igraph_manual(node.positions = node_positions, circular = FALSE)
g3 <- graph_from_literal(DNA --+ RNA --+ Protein)
ggraph(g3, layout = 'graphopt') +
geom_edge_link(aes(label = type),
angle_calc = 'along',
label_dodge = unit(2.5, 'mm'),
arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
geom_node_point(size = 5)
####
ll <- create_layout(g3, "igraph", algorithm = "nicely")
bigger_dag <- dagify(Y ~ QTL + C1 + C2,
QTL ~ C1 + C2
)
bigger_dag
plot(bigger_dag)
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_dag(breaks  = c("parent", "child")) #  ignores NA in legend
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag()
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_dag(breaks  = NA) #  ignores NA in legend
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_dag(breaks = NULL) #  ignores NA in legend
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted(breaks = NULL) #  ignores NA in legend
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() #  ignores NA in legend
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
theme(legend.position='none')
bigger_dag <- dagify(Y ~ QTL + C[1] + C[2],
QTL ~ C[1] + C[2]
)
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
theme(legend.position='none')
expr(C[1])
expr("C[1]")
expression("C[1]")
bigger_dag <- dagify(Y ~ QTL + expression(C[1]) + C[2],
QTL ~ expression(C[1]) + C[2]
)
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
theme(legend.position='none')
bigger_dag <- dagify(Y ~ QTL + C1 + C2,
QTL ~ C1 + C2
)
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
theme(legend.position='none')
bigger_dag <- dagify(Y ~ QTL + M + C1 + C2,
QTL ~ C1,
M ~ QTL + C2
)
bigger_dag %>%
node_parents("QTL") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
theme(legend.position='none')
bigger_dag %>%
node_parents("QTL") %>%
ggdag_canonical() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color = parent)) +
geom_dag_node() +
geom_dag_edges() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
theme(legend.position='none')
bigger_dag
gg <- dagitty('dag {
QTL [pos="0,0"]
Mediator [pos="1,0"]
Y [pos="2,0"]
QTL -> Mediator -> Y
C1 -> QTL
C1 -> Y
QTL -> Y}')
plot(graphLayout(gg))
#####
g <- dagitty('dag {
DNA [pos="0,0"]
RNA [pos="1,0"]
Protein [pos="2,0"]
DNA -> RNA -> Protein
}')
plot(g)
gg <- dagitty('dag {
QTL [pos="0,0"]
Mediator [pos="1,0"]
Y [pos="2,0"]
C1 [pos="0,1"]
QTL -> Mediator -> Y
C1 -> QTL
C1 -> Y
QTL -> Y}')
plot(graphLayout(gg))
gg <- dagitty('dag {
QTL [pos="0,0"]
Mediator [pos="1,0"]
Y [pos="2,0"]
QTL -> Mediator -> Y
QTL -> Y}')
plot(graphLayout(gg))
?ggraph::create_layout
plot(layout_igraph_linear(gg))
plot(ggraph::layout_igraph_linear(gg))
plot(ggraph:::layout_igraph_linear(gg))
tidy_dagitty(gg)
gg %>%
tidy_dagitty() %>%
ggraph:::layout_igraph_linear(circular = FALSE) %>%
plot()
?tidy_dagitty
gg %>%
tidy_dagitty() %>%
ggraph()
gg %>%
tidy_dagitty() %>%
ggraph(layout = "auto
")
gg %>%
tidy_dagitty() %>%
ggraph(layout = "linear
")
gg %>%
tidy_dagitty() %>%
ggraph(layout = "linear")
gg %>%
tidy_dagitty(layout = "fr") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges() +
theme_dag() +
scale_dag()
gg <- dagitty('dag {
QTL [pos="0,0"]
M [pos="1,0"]
Y [pos="2,0"]
QTL -> M -> Y
QTL -> Y}')
plot(graphLayout(gg))
gg %>%
tidy_dagitty(layout = "fr") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges() +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges() +
theme_dag() +
scale_dag()
gg %>% adjust_for("C1")
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges() +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
#geom_dag_text() +
geom_dag_edges() +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
#geom_dag_edges() +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc() +
theme_dag() +
scale_dag()
gg <- dagitty('dag {
QTL [pos="0,0"]
M [pos="1,0"]
Y [pos="2,0"]
C1 [pos="1,1"]
QTL -> M -> Y
QTL <- C1 -> Y
QTL -> Y}')
plot(graphLayout(gg))
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc() +
theme_dag() +
scale_dag()
?geom_dag_edges_arc
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg <- dagitty('dag {
QTL [pos="0,0"]
M [pos="1,0"]
Y [pos="2,0"]
C1 [pos="1,0.5"]
C2 [pos="1,-0.5"]
QTL -> M -> Y
QTL <- C1 -> Y
QTL -> Y}')
plot(graphLayout(gg))
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg <- dagitty('dag {
QTL [pos="0,0"]
M [pos="1,0"]
Y [pos="2,0"]
C1 [pos="1,0.5"]
C2 [pos="1,-0.5"]
QTL -> M -> Y
QTL <- C1 -> Y
M <- C2 -> Y
QTL -> Y}')
plot(graphLayout(gg))
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.3) +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0) +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg <- dagitty('dag {
QTL [pos="0,0"]
M [pos="1,0"]
Y [pos="2,0"]
C1 [pos="1,0.5"]
C2 [pos="1,-0.5"]
C3 [pos="0, -0.5"]
QTL -> M -> Y
QTL <- C1 -> Y
M <- C2 -> Y
QTL <- C3 -> M
QTL -> Y}')
gg %>%
tidy_dagitty(layout = "linear") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty(layout = "auto") %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
gg %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_node() +
geom_dag_text() +
geom_dag_edges_arc(curvature = 0.1) +
theme_dag() +
scale_dag()
ggsave("Figs/confounding.pdf", width = 6.5, height = 4)
